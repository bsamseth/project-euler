/**
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Compile and run: g++ -std=c++11 12.cpp -o 12.x && ./12.x
 */

#include <iostream>
#include <map>

/**
 * Return dict with primes and multiplisities.
 *
 * 		primes(20) -> {2:2, 5:1}
 */
std::map<int, int> primes(int n) {
    std::map<int, int> primfac;
    int d = 2;
    while (d*d <= n) {
        primfac[d] = 0;
        while ((n % d) == 0) {
            primfac[d] += 1;
            n /= d;
        }
        d++;
    }
    if (n > 1) {
        primfac[n] = 1;
    }
    return primfac;
}

int ndivisors(int n){
    std::map<int, int> primefac = primes(n);
    int divisors = 1;
    for (auto mult: primefac) {
        divisors *= (mult.second+1);
    }
    return divisors;
}


int main(int argc, char const *argv[]) {
    int numb = 1, s = 1;
    int cmaxdiv = 1;
    while (s > 0) {
        int divisors = ndivisors(s);
        if (divisors > 500) {
            std::cout << "Solution! " << s << " " << numb << std::endl;
            break;
        }
        if (divisors > cmaxdiv) {
            std::cout << "Current maximum divisors: " << divisors
                      << ", for triangle #" << numb
                      << " = " << s << std::endl;
            cmaxdiv = divisors;
        }
        numb++;
        s += numb;
    }
    return 0;
}
